import dash
from dash import html, dcc
from dash import callback_context
from dash.dependencies import Input, Output, State
from picamera2 import Picamera2
import io
import base64
from PIL import Image, ImageDraw
import numpy as np
import atexit
import plotly.graph_objs as go

app = dash.Dash(__name__)

app.layout = html.Div([
   html.Div([
      html.Img(id='image', style={'width':'50%'}),
      dcc.Graph(id='rgb-histogram', style={'width':'50%'})
   ], style={'display': 'flex', 'flexDirection': 'row', 'width':'100%'}),
    dcc.Interval(
        id='interval-component',
        interval=1*1000, # in milliseconds
        n_intervals=0
    ),
    html.Div(id='rgb-value'),
    html.Div(id='median-rgb-value'),
    html.Button('Calibrate', id='calibrate-button', n_clicks=0),
    dcc.Input(id='target-r', type='number', placeholder='Target R value'),
    dcc.Input(id='target-g', type='number', placeholder='Target G value'),
    dcc.Input(id='target-b', type='number', placeholder='Target B value')
])

# Create a Picamera2 object and start the camera
picam2 = Picamera2()
picam2.start(show_preview=False)
metadata = picam2.capture_metadata()
current_gains = metadata["ColourGains"]
gains = list(current_gains)
gains = tuple([gains[0]+0.7, gains[1]])
picam2.set_controls({"ColourGains": gains, "AwbEnable": False})

@app.callback(
    [Output('image', 'src'), Output('rgb-histogram', 'figure'), Output('rgb-value', 'children'), Output('median-rgb-value', 'children')],
    [Input('interval-component', 'n_intervals')], [State('calibrate-button', 'n_clicks'),
    State('target-r', 'value'), State('target-g', 'value'), State('target-b', 'value')])
def update_image(n, n_clicks, target_r, target_g, target_b):
    # Capture an image as a PIL Image object
    image = picam2.capture_image("main")

    # Convert the image to RGB mode if necessary
    if image.mode == 'RGBA':
        image = image.convert('RGB')

    # Take a sample of pixels from the center of the screen and output the average RGB value
    width, height = image.size
    center_x, center_y = width // 2, height // 2
    sample_size = 20

    sample_box = (center_x - sample_size // 2, center_y - sample_size // 2,
                  center_x + sample_size // 2, center_y + sample_size // 2)
    sample_image = image.crop(sample_box)
    sample_array = np.array(sample_image)
    
    avg_rgb = np.mean(sample_array, axis=(0, 1))
    
    # Compute the binned RGB values for each color channel
    bins = np.arange(0, 256)
    r_hist, _ = np.histogram(sample_array[..., 0], bins=bins)
    g_hist, _ = np.histogram(sample_array[..., 1], bins=bins)
    b_hist, _ = np.histogram(sample_array[..., 2], bins=bins)
   
    x_min = max(0, int(np.min(avg_rgb)) - 10)
    x_max = min(255, int(np.max(avg_rgb)) + 10)
    
    r_text = np.full_like(r_hist, None, dtype=object)
    r_text[np.argmax(r_hist)] = np.argmax(r_hist)
    g_text = np.full_like(g_hist, None, dtype=object)
    g_text[np.argmax(g_hist)] = np.argmax(g_hist)
    b_text = np.full_like(b_hist, None, dtype=object)
    b_text[np.argmax(b_hist)] = np.argmax(b_hist)
   
    # Create a list of go.Bar traces for each color channel
    data = [
        go.Bar(x=bins[:-1], y=r_hist, name='R', marker_color='red', text=r_text, textposition = 'outside'),
        go.Bar(x=bins[:-1], y=g_hist, name='G', marker_color='green', text=g_text, textposition = 'outside'),
        go.Bar(x=bins[:-1], y=b_hist, name='B', marker_color='blue', text=b_text, textposition = 'outside')
    ]

    # Create a layout for the graph
    layout = go.Layout(
        barmode='overlay',
        xaxis=dict(title='Pixel Value', range=[x_min,x_max]),
        yaxis=dict(title='Count')
    )

    # Create a Figure object for the graph
    figure = go.Figure(data=data, layout=layout)

    

    # Calibrate the camera if the calibrate button was clicked
    if n_clicks < -10 and all(v is not None for v in [target_r, target_g, target_b]):
        target_rgb = np.array([target_r, target_g, target_b])
        calibration_offset = target_rgb - avg_rgb
        
        metadata = picam2.capture_metadata()
        current_gains = metadata["ColourGains"]
        gains = [current_gains[0]+0.1*calibration_offset[0],current_gains[1]+0.1*calibration_offset[1]]
        picam2.set_controls({"ColourGains": gains})

        # Reset the calibrate button clicks to prevent repeated calibration
        callback_context.triggered[0]['prop_id'].split('.')[0] == 'calibrate-button'
        calibrate_button = callback_context.states[('calibrate-button', 'n_clicks')]
        calibrate_button.n_clicks = 0

        

    # Draw a box on the image to represent the sample area
    draw = ImageDraw.Draw(image)
    draw.rectangle(sample_box, outline=(0,0,0), width=3)
    median_rgb = np.median(sample_array, axis=(0,1))
    # Save the image data to a BytesIO object
    image_data = io.BytesIO()
    image.save(image_data, format='JPEG')

    # Encode the image data as a base64 string
    encoded_image = base64.b64encode(image_data.getvalue()).decode('ascii')

    # Return the data URL for the image and the average RGB value
    return f'data:image/jpeg;base64,{encoded_image}', figure, f'Average RGB value: {avg_rgb}', f'Median RGB value: {median_rgb}'

def stop_camera():
    picam2.stop()

atexit.register(stop_camera)

if __name__ == '__main__':
    app.run_server()
