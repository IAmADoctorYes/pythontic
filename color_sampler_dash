import dash
from dash import html, dcc
from dash.dependencies import Input, Output
from picamera2 import Picamera2
import io
import base64
from PIL import Image, ImageDraw
import numpy as np

app = dash.Dash(__name__)

app.layout = html.Div([
    html.Img(id='image'),
    dcc.Interval(
        id='interval-component',
        interval=1*1000, # in milliseconds
        n_intervals=0
    ),
    html.Div(id='rgb-value')
])

# Create a Picamera2 object and start the camera
picam2 = Picamera2()
picam2.start(show_preview=True)

@app.callback(
    [Output('image', 'src'), Output('rgb-value', 'children')],
    Input('interval-component', 'n_intervals')
)
def update_image(n):
    # Capture an image as a PIL Image object
    image = picam2.capture_image("main")

    # Convert the image to RGB mode if necessary
    if image.mode == 'RGBA':
        image = image.convert('RGB')

    # Take a sample of pixels from the center of the screen and output the average RGB value
    width, height = image.size
    center_x, center_y = width // 2, height // 2
    sample_size = 10

    sample_box = (center_x - sample_size // 2, center_y - sample_size // 2,
                  center_x + sample_size // 2, center_y + sample_size // 2)
    sample_image = image.crop(sample_box)
    sample_array = np.array(sample_image)
    avg_rgb = np.mean(sample_array, axis=(0, 1))

    # Draw a box on the image to represent the sample area
    draw = ImageDraw.Draw(image)
    draw.rectangle(sample_box, outline=tuple(avg_rgb.astype(int)), width=3)

    # Save the image data to a BytesIO object
    image_data = io.BytesIO()
    image.save(image_data, format='JPEG')

    # Encode the image data as a base64 string
    encoded_image = base64.b64encode(image_data.getvalue()).decode('ascii')

    # Return the data URL for the image and the average RGB value
    return f'data:image/jpeg;base64,{encoded_image}', f'Average RGB value: {avg_rgb}'

if __name__ == '__main__':
    app.run_server()
